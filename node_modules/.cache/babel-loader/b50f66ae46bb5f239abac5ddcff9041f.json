{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Bidisha Das\\\\Downloads\\\\QuotesDashboard\\\\QuotesDashboard\\\\src\\\\components\\\\quotes\\\\QuoteList.js\",\n    _s = $RefreshSig$();\n\nimport { useHistory, useLocation } from \"react-router-dom\";\nimport { Fragment } from \"react\";\nimport QuoteItem from \"./QuoteItem\";\nimport classes from \"./QuoteList.module.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst sortQuotes = (quotes, ascending) => {\n  return quotes.sort((quoteA, quoteB) => {\n    if (ascending) {\n      return quoteA.id > quoteB.id ? 1 : -1;\n    } else {\n      return quoteA.id < quoteB.id ? 1 : -1;\n    }\n  });\n};\n\nconst QuoteList = props => {\n  _s();\n\n  const history = useHistory();\n  /**\n   * Gives idea about current location\n   */\n\n  const location = useLocation();\n  /**\n   * Gives key value pair of the passed object\n   */\n\n  const queryParams = new URLSearchParams(location.search);\n  const isSortAscending = queryParams.get(\"sort\") === \"asc\";\n  const sortedQuotes = sortQuotes(props.quotes, isSortAscending);\n\n  const changeSortingHandler = () => {\n    /**\n     * Just another alternative\n     */\n    history.push({\n      pathname: location.pathname,\n      search: `?sort=${isSortAscending ? 'desc' : 'asc'}`\n    }); // history.push(\"/quotes?sort=\" + (isSortAscending ? \"desc\" : \"asc\"));\n\n    history.push(`${location.pathname}?sort=${isSortAscending ? 'desc' : 'asc'}`);\n  };\n\n  return /*#__PURE__*/_jsxDEV(Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: classes.sorting,\n      children: /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: changeSortingHandler,\n        children: [\"Sort \", isSortAscending ? \"Descending\" : \"Ascending\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 51,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n      className: classes.list,\n      children: sortedQuotes.map(quote => /*#__PURE__*/_jsxDEV(QuoteItem, {\n        id: quote.id,\n        author: quote.author,\n        text: quote.text\n      }, quote.id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 49,\n    columnNumber: 5\n  }, this);\n};\n\n_s(QuoteList, \"azjqGSEfmvz5+G/YRUZm7OceOpI=\", false, function () {\n  return [useHistory, useLocation];\n});\n\n_c = QuoteList;\nexport default QuoteList;\n\nvar _c;\n\n$RefreshReg$(_c, \"QuoteList\");","map":{"version":3,"sources":["C:/Users/Bidisha Das/Downloads/QuotesDashboard/QuotesDashboard/src/components/quotes/QuoteList.js"],"names":["useHistory","useLocation","Fragment","QuoteItem","classes","sortQuotes","quotes","ascending","sort","quoteA","quoteB","id","QuoteList","props","history","location","queryParams","URLSearchParams","search","isSortAscending","get","sortedQuotes","changeSortingHandler","push","pathname","sorting","list","map","quote","author","text"],"mappings":";;;AAAA,SAASA,UAAT,EAAqBC,WAArB,QAAwC,kBAAxC;AAEA,SAASC,QAAT,QAAyB,OAAzB;AAEA,OAAOC,SAAP,MAAsB,aAAtB;AACA,OAAOC,OAAP,MAAoB,wBAApB;;;AAEA,MAAMC,UAAU,GAAG,CAACC,MAAD,EAASC,SAAT,KAAuB;AACxC,SAAOD,MAAM,CAACE,IAAP,CAAY,CAACC,MAAD,EAASC,MAAT,KAAoB;AACrC,QAAIH,SAAJ,EAAe;AACb,aAAOE,MAAM,CAACE,EAAP,GAAYD,MAAM,CAACC,EAAnB,GAAwB,CAAxB,GAA4B,CAAC,CAApC;AACD,KAFD,MAEO;AACL,aAAOF,MAAM,CAACE,EAAP,GAAYD,MAAM,CAACC,EAAnB,GAAwB,CAAxB,GAA4B,CAAC,CAApC;AACD;AACF,GANM,CAAP;AAOD,CARD;;AAUA,MAAMC,SAAS,GAAIC,KAAD,IAAW;AAAA;;AAC3B,QAAMC,OAAO,GAAGd,UAAU,EAA1B;AAEA;AACF;AACA;;AACE,QAAMe,QAAQ,GAAGd,WAAW,EAA5B;AACA;AACF;AACA;;AACE,QAAMe,WAAW,GAAG,IAAIC,eAAJ,CAAoBF,QAAQ,CAACG,MAA7B,CAApB;AAEA,QAAMC,eAAe,GAAGH,WAAW,CAACI,GAAZ,CAAgB,MAAhB,MAA4B,KAApD;AAEA,QAAMC,YAAY,GAAGhB,UAAU,CAACQ,KAAK,CAACP,MAAP,EAAea,eAAf,CAA/B;;AAEA,QAAMG,oBAAoB,GAAG,MAAM;AAEjC;AACJ;AACA;AACIR,IAAAA,OAAO,CAACS,IAAR,CAAa;AACXC,MAAAA,QAAQ,EAACT,QAAQ,CAACS,QADP;AAEXN,MAAAA,MAAM,EAAI,SAASC,eAAe,GAAE,MAAF,GAAU,KAAO;AAFxC,KAAb,EALiC,CAUjC;;AACAL,IAAAA,OAAO,CAACS,IAAR,CAAc,GAAER,QAAQ,CAACS,QAAS,SAASL,eAAe,GAAE,MAAF,GAAU,KAAO,EAA3E;AACD,GAZD;;AAcA,sBACE,QAAC,QAAD;AAAA,4BACE;AAAK,MAAA,SAAS,EAAEf,OAAO,CAACqB,OAAxB;AAAA,6BACE;AAAQ,QAAA,OAAO,EAAEH,oBAAjB;AAAA,4BACQH,eAAe,GAAG,YAAH,GAAkB,WADzC;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,YADF,eAME;AAAI,MAAA,SAAS,EAAEf,OAAO,CAACsB,IAAvB;AAAA,gBACGL,YAAY,CAACM,GAAb,CAAkBC,KAAD,iBAChB,QAAC,SAAD;AAEE,QAAA,EAAE,EAAEA,KAAK,CAACjB,EAFZ;AAGE,QAAA,MAAM,EAAEiB,KAAK,CAACC,MAHhB;AAIE,QAAA,IAAI,EAAED,KAAK,CAACE;AAJd,SACOF,KAAK,CAACjB,EADb;AAAA;AAAA;AAAA;AAAA,cADD;AADH;AAAA;AAAA;AAAA;AAAA,YANF;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAmBD,CAjDD;;GAAMC,S;UACYZ,U,EAKCC,W;;;KANbW,S;AAmDN,eAAeA,SAAf","sourcesContent":["import { useHistory, useLocation } from \"react-router-dom\";\n\nimport { Fragment } from \"react\";\n\nimport QuoteItem from \"./QuoteItem\";\nimport classes from \"./QuoteList.module.css\";\n\nconst sortQuotes = (quotes, ascending) => {\n  return quotes.sort((quoteA, quoteB) => {\n    if (ascending) {\n      return quoteA.id > quoteB.id ? 1 : -1;\n    } else {\n      return quoteA.id < quoteB.id ? 1 : -1;\n    }\n  });\n};\n\nconst QuoteList = (props) => {\n  const history = useHistory();\n\n  /**\n   * Gives idea about current location\n   */\n  const location = useLocation();\n  /**\n   * Gives key value pair of the passed object\n   */\n  const queryParams = new URLSearchParams(location.search);\n\n  const isSortAscending = queryParams.get(\"sort\") === \"asc\";\n\n  const sortedQuotes = sortQuotes(props.quotes, isSortAscending);\n\n  const changeSortingHandler = () => {\n\n    /**\n     * Just another alternative\n     */\n    history.push({\n      pathname:location.pathname,\n      search:  `?sort=${(isSortAscending? 'desc': 'asc')}`\n    })\n\n    // history.push(\"/quotes?sort=\" + (isSortAscending ? \"desc\" : \"asc\"));\n    history.push(`${location.pathname}?sort=${(isSortAscending? 'desc': 'asc')}`)\n  };\n\n  return (\n    <Fragment>\n      <div className={classes.sorting}>\n        <button onClick={changeSortingHandler}>\n          Sort {isSortAscending ? \"Descending\" : \"Ascending\"}\n        </button>\n      </div>\n      <ul className={classes.list}>\n        {sortedQuotes.map((quote) => (\n          <QuoteItem\n            key={quote.id}\n            id={quote.id}\n            author={quote.author}\n            text={quote.text}\n          />\n        ))}\n      </ul>\n    </Fragment>\n  );\n};\n\nexport default QuoteList;\n"]},"metadata":{},"sourceType":"module"}